;;;; Based on https://github.com/hbf/miniball
(in-package #:org.shirakumo.fraf.manifolds)

(defstruct (subspan (:constructor %make-subspan))
  (vertices #() :type vertex-array)
  (membership #() :type bit-vector)
  (members #() :type (simple-array vertex (4)))
  (q (meye 3) :type mat3)
  (r (mat3) :type mat3)
  (u (vec3) :type vec3)
  (w (vec3) :type vec3)
  (rank 0 :type vertex)
  (c 0.0 :type single-float)
  (s 0.0 :type single-float))

(defun make-subspan (vertices k)
  (let ((membership (make-array (truncate (length vertices) 3) :element-type 'bit))
        (members (make-array 4 :element-type 'vertex)))
    (setf (aref membership k) 1)
    (setf (aref members 0) k)
    (%make-subspan :vertices vertices
                   :membership membership
                   :members members)))

(defun subspan-origin (subspan)
  (v (subspan-vertices subspan) (aref (subspan-members subspan) (subspan-rank subspan))))

(defun subspan-any (subspan)
  (v (subspan-vertices subspan) (aref (subspan-members subspan) (subspan-rank subspan))))

(defun subspan-member-p (subspan vertex)
  (sbitp (subspan-membership subspan) vertex))

(defun subspan-size (subspan)
  (1+ (subspan-rank subspan)))

(defun subspan-find-affine-coefficients (subspan center lambdas)
  (!v- (subspan-u subspan) center (subspan-origin subspan))
  (!m* (subspan-w subspan) (mtranspose (subspan-q subspan)) (subspan-u subspan))
  (let ((origin-lambda 1.0))
    (loop for j downfrom (1- (subspan-rank subspan)) to 0
          do (loop for k from (1+ j) below (subspan-rank subspan)
                   do (decf (aref (varr (subspan-w subspan)) j)
                            (* (aref lambdas k) (mcref (subspan-r subspan) k j))))
             (let ((lj (/ (aref (varr (subspan-w subspan)) j) (mcref (subspan-r subspan) j j))))
               (setf (aref lambdas j) lj)
               (decf origin-lambda lj)))
    (setf (aref lambdas (subspan-rank subspan)) origin-lambda)))

(defun subspan-givens (subspan a b)
  (cond ((= 0 b)
         (setf (subspan-c subspan) 1.0)
         (setf (subspan-s subspan) 0.0))
        ((< (abs a) (abs b))
         (let ((tt (/ a b)))
           (setf (subspan-s subspan) (/ (sqrt (1+ (* tt tt)))))
           (setf (subspan-c subspan) (* (subspan-s subspan) tt))))
        (T
         (let ((tt (/ b a)))
           (setf (subspan-c subspan) (/ (sqrt (1+ (* tt tt)))))
           (setf (subspan-s subspan) (* (subspan-c subspan) tt))))))

(defun subspan-append-column (subspan)
  (let ((r (subspan-rank subspan)))
    (dotimes (i 3)
      (setf (mcref (subspan-r subspan) r i) 0.0)
      (dotimes (k 3)
        (incf (mcref (subspan-r subspan) r i)
              (* (mcref (subspan-q subspan) i r)
                 (aref (varr (subspan-u subspan)) k)))))
    (loop for j downfrom (1- 3) above r
          do (subspan-givens subspan (mcref (subspan-r subspan) r (1- j)) (mcref (subspan-r subspan) r j))
             (let ((c (subspan-c subspan))
                   (s (subspan-s subspan)))
               (setf (mcref (subspan-r subspan) r (1- j))
                     (+ (* c (mcref (subspan-r subspan) r (1- j)))
                        (* s (mcref (subspan-r subspan) r j))))
               (loop for i from 0 below 3
                     for a = (mcref (subspan-q subspan) (1- j) i)
                     for b = (mcref (subspan-q subspan) j i)
                     do (setf (mcref (subspan-q subspan) (1- j) i) (+ (* c a) (* s b)))
                        (setf (mcref (subspan-q subspan) j i) (- (* c b) (* s a))))))))

(defun subspan-add (subspan vertex)
  (!v- (subspan-u subspan)
       (v (subspan-vertices subspan) vertex)
       (subspan-origin subspan))
  (subspan-append-column subspan)
  (setf (aref (subspan-membership subspan) vertex) 1)
  (setf (aref (subspan-members subspan) (1+ (subspan-rank subspan)))
        (aref (subspan-members subspan) (subspan-rank subspan)))
  (setf (aref (subspan-members subspan) (subspan-rank subspan))
        vertex)
  (incf (subspan-rank subspan)))

(defun subspan-hessenberg-clear (subspan pos)
  (loop while (< pos (subspan-rank subspan))
        do (subspan-givens subspan (mcref (subspan-r subspan) pos pos) (mcref (subspan-r subspan) pos (1+ pos)))
           (let ((c (subspan-c subspan))
                 (s (subspan-s subspan)))
             (setf (mcref (subspan-r subspan) pos pos) (+ (* c (mcref (subspan-r subspan) pos pos))
                                                          (* s (mcref (subspan-r subspan) pos (1+ pos)))))
             (loop for j from (1+ pos) below (subspan-rank subspan)
                   for a = (mcref (subspan-r subspan) j pos)
                   for b = (mcref (subspan-r subspan) j (1+ pos))
                   do (setf (mcref (subspan-r subspan) j pos) (+ (* c a) (* s b)))
                      (setf (mcref (subspan-r subspan) j (1+ pos)) (- (* c b) (* s a))))
             (loop for i from 0 below 3
                   for a = (mcref (subspan-q subspan) pos i)
                   for b = (mcref (subspan-q subspan) (1+ pos) i)
                   do (setf (mcref (subspan-q subspan) pos i) (+ (* c a) (* s b)))
                      (setf (mcref (subspan-q subspan) (1+ pos) i) (- (* c b) (* s a))))
             (incf pos))))

(defun subspan-special-rank-1-update (subspan)
  (!m* (subspan-w subspan) (mtranspose (subspan-q subspan)) (subspan-u subspan))
  (loop for k downfrom 2 above 0
        do (subspan-givens subspan (aref (varr (subspan-w subspan)) (1- k))
                           (aref (varr (subspan-w subspan)) k))
           (let ((c (subspan-c subspan))
                 (s (subspan-s subspan)))
             (setf (aref (varr (subspan-w subspan)) (1- k))
                   (+ (* c (aref (varr (subspan-w subspan)) (1- k)))
                      (* s (aref (varr (subspan-w subspan)) k))))
             (setf (mcref (subspan-r subspan) (1- k) k) (* (- s) (mcref (subspan-r subspan) (1- k) (1- k))))
             (setf (mcref (subspan-r subspan) (1- k) (1- k)) (* c (mcref (subspan-r subspan) (1- k) (1- k))))
             (loop for j from k below (subspan-rank subspan)
                   for a = (mcref (subspan-r subspan) j (1- k))
                   for b = (mcref (subspan-r subspan) j k)
                   do (setf (mcref (subspan-r subspan) j (1- k)) (+ (* c a) (* s b)))
                      (setf (mcref (subspan-r subspan) j k) (- (* c b) (* s a))))
             (loop for i from 0 below 3
                   for a = (mcref (subspan-q subspan) (1- k) i)
                   for b = (mcref (subspan-q subspan) k i)
                   do (setf (mcref (subspan-q subspan) (1- k) i) (+ (* c a) (* s b)))
                      (setf (mcref (subspan-q subspan) k i) (- (* c b) (* s a))))))
  (dotimes (j (subspan-rank subspan))
    (incf (mcref (subspan-r subspan) j 0) (aref (varr (subspan-w subspan)) 0)))
  (subspan-hessenberg-clear subspan 0))

(defun subspan-shortest-vector-to-span (subspan p w)
  (!v- w (subspan-origin subspan) p)
  (dotimes (j (subspan-rank subspan))
    (let ((scale 0.0))
      (dotimes (i 3)
        (incf scale (* (aref (varr w) i)
                       (mcref (subspan-q subspan) j i))))
      (dotimes (i 3)
        (decf (aref (varr w) i)
              (* scale (mcref (subspan-q subspan) j i))))))
  (vsqrlength w))

(defun subspan-remove (subspan vertex)
  (setf (aref (subspan-membership subspan) (aref (subspan-members subspan) vertex)) 0)
  (cond ((= vertex (subspan-rank subspan))
         (!v- (subspan-u subspan)
              (subspan-origin subspan)
              (v (subspan-vertices subspan) (aref (subspan-members subspan) (1- (subspan-rank subspan)))))
         (decf (subspan-rank subspan))
         (subspan-special-rank-1-update subspan))
        (T
         (let ((dummy (mcol (subspan-r subspan) vertex)))
           (loop for j from (1+ vertex) below (subspan-rank subspan)
                 do (setf (mcol (subspan-r subspan) (1- j))
                          (mcol (subspan-r subspan) j))
                    (setf (aref (subspan-members subspan) (1- j))
                          (aref (subspan-members subspan) j)))
           (setf (aref (subspan-members subspan) (1- (subspan-rank subspan)))
                 (aref (subspan-members subspan) (subspan-rank subspan)))
           (decf (subspan-rank subspan))
           (setf (mcol (subspan-r subspan) (subspan-rank subspan)) dummy))
         (subspan-hessenberg-clear subspan vertex))))

(defstruct miniball
  (vertices #() :type vertex-array)
  (center (vec3) :type vec3)
  (center-to-aff (vec3) :type vec3)
  (center-to-point (vec3) :type vec3)
  (lambdas (make-array 4 :element-type 'single-float) :type (simple-array single-float (4)))
  (dist-to-aff 0.0 :type single-float)
  (dist-to-aff-square 0.0 :type single-float)
  (squared-radius 0.0 :type single-float)
  (radius 0.0 :type single-float)
  (support NIL :type subspan)
  (stopper 0 :type (signed-byte 31))
  (eps 1e-14 :type single-float))

(defun miniball-compute-dist-to-aff (miniball)
  (setf (miniball-dist-to-aff-square miniball)
        (subspan-shortest-vector-to-span (miniball-support miniball) (miniball-center miniball) (miniball-center-to-aff miniball)))
  (setf (miniball-dist-to-aff miniball)
        (sqrt (miniball-dist-to-aff-square miniball))))

(defun miniball-update-radius (miniball)
  (setf (miniball-squared-radius miniball)
        (vsqrdistance (subspan-any (miniball-support miniball)) (miniball-center miniball)))
  (setf (miniball-radius miniball)
        (sqrt (miniball-squared-radius miniball))))

(defun miniball-successful-drop (miniball)
  (subspan-find-affine-coefficients (miniball-support miniball) (miniball-center miniball) (miniball-lambdas miniball))
  (let ((smallest 0)
        (minimum 1.0))
    (dotimes (i (subspan-size (miniball-support miniball)))
      (when (< (aref (miniball-lambdas miniball) i) minimum)
        (setf minimum (aref (miniball-lambdas miniball) i))
        (setf smallest i)))
    (when (<= minimum 0)
      (subspan-remove (miniball-support miniball) smallest)
      T)))

(defun miniball-find-stop-fraction (miniball)
  (let ((scale 1.0)
        (vertices (miniball-vertices miniball)))
    (setf (miniball-stopper miniball) -1)
    (dotimes (j (truncate (length vertices) 3) scale)
      (unless (subspan-member-p (miniball-support miniball) j)
        (!v- (miniball-center-to-point miniball) (v vertices j) (miniball-center miniball))
        (let ((dir-point-prod (v. (miniball-center-to-aff miniball) (miniball-center-to-point miniball))))
          (unless (< (- (miniball-dist-to-aff-square miniball) dir-point-prod)
                     (* (miniball-eps miniball) (miniball-radius miniball) (miniball-dist-to-aff miniball)))
            (let* ((bound (vsqrlength (miniball-center-to-point miniball)))
                   (bound (/ (- (miniball-squared-radius miniball) bound) 2 (- (miniball-dist-to-aff-square miniball) dir-point-prod))))
              (when (and (< 0 bound) (< bound scale))
                (setf scale bound)
                (setf (miniball-stopper miniball) j)))))))))

(defun bounding-sphere (vertices)
  (check-type vertices vertex-array)
  (let ((center (v vertices 0))
        (squared-radius 0.0)
        (farthest 0))
    (loop for i from 1 below (truncate (length vertices) 3)
          for v = (v vertices i)
          for dist = (vsqrdistance center v)
          do (when (<= squared-radius dist)
               (setf squared-radius dist)
               (setf farthest i)))
    (let ((miniball (make-miniball :vertices vertices
                                   :center center
                                   :squared-radius squared-radius
                                   :radius (sqrt squared-radius)
                                   :support (make-subspan vertices farthest))))
      (loop (miniball-compute-dist-to-aff miniball)
            (loop while (<= (miniball-dist-to-aff miniball) (miniball-eps miniball))
                  do (unless (miniball-successful-drop miniball)
                       (return))
                     (miniball-compute-dist-to-aff miniball))
            (let ((scale (miniball-find-stop-fraction miniball)))
              (cond ((<= 0 (miniball-stopper miniball))
                     (nv+* (miniball-center miniball) (miniball-center-to-aff miniball) scale)
                     (miniball-update-radius miniball)
                     (subspan-add (miniball-support miniball) (miniball-stopper miniball)))
                    (T
                     (nv+ (miniball-center miniball) (miniball-center-to-aff miniball))
                     (miniball-update-radius miniball)
                     (unless (miniball-successful-drop miniball)
                       (return))))))
      (values center
              (miniball-radius miniball)))))
